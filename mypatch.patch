diff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/Layout.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/Layout.java
index ba4b4b5bd..f5bc7f41c 100644
--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/Layout.java
+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/Layout.java
@@ -98,7 +98,7 @@ public interface Layout<T extends Serializable> extends Encoder<LogEvent> {
     Map<String, String> getContentFormat();
 
     /**
-     * Indiates whether this Layout requires location information.
+     * Indicates whether this Layout requires location information.
      * @return returns true if the Layout requires location information.
      */
     default boolean requiresLocation() {
diff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/AbstractDatabaseManager.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/AbstractDatabaseManager.java
index c555df083..fd61dfba7 100644
--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/AbstractDatabaseManager.java
+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/AbstractDatabaseManager.java
@@ -44,7 +44,7 @@ public abstract class AbstractDatabaseManager extends AbstractManager implements
          * Constructs the base factory data.
          *
          * @param bufferSize The size of the buffer.
-         * @param bufferSize The appender-level layout
+         * @param layout The appender-level layout
          */
         protected AbstractFactoryData(final int bufferSize, final Layout<? extends Serializable> layout) {
             this.bufferSize = bufferSize;
diff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDelegate.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDelegate.java
index 5e01f8b16..d28ce5602 100644
--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDelegate.java
+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDelegate.java
@@ -1,66 +1,66 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache license, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the license for the specific language governing permissions and
- * limitations under the license.
- */
-
-package org.apache.logging.log4j.core.async;
-
-import org.apache.logging.log4j.Level;
-import org.apache.logging.log4j.core.LogEvent;
-import org.apache.logging.log4j.core.impl.LogEventFactory;
-import org.apache.logging.log4j.core.jmx.RingBufferAdmin;
-
-/**
- * Encapsulates the mechanism used to log asynchronously. There is one delegate per configuration, which is shared by
- * all AsyncLoggerConfig objects in the configuration.
- */
-public interface AsyncLoggerConfigDelegate {
-
-    /**
-     * Creates and returns a new {@code RingBufferAdmin} that instruments the ringbuffer of this
-     * {@code AsyncLoggerConfig}.
-     *
-     * @param contextName name of the {@code LoggerContext}
-     * @param loggerConfigName name of the logger config
-     * @return the RingBufferAdmin that instruments the ringbuffer
-     */
-    RingBufferAdmin createRingBufferAdmin(final String contextName, final String loggerConfigName);
-
-    /**
-     * Returns the {@code EventRoute} for the event with the specified level.
-     *
-     * @param level the level of the event to log
-     * @return the {@code EventRoute}
-     */
-    EventRoute getEventRoute(final Level level);
-
-    /**
-     * Enqueues the {@link LogEvent} on the mixed configuration ringbuffer.
-     * This method must only be used after {@link #tryEnqueue(LogEvent, AsyncLoggerConfig)} returns <code>false</code>
-     * indicating that the ringbuffer is full, otherwise it may incur unnecessary synchronization.
-     */
-    void enqueueEvent(LogEvent event, AsyncLoggerConfig asyncLoggerConfig);
-
-    boolean tryEnqueue(LogEvent event, AsyncLoggerConfig asyncLoggerConfig);
-
-    /**
-     * Notifies the delegate what LogEventFactory an AsyncLoggerConfig is using, so the delegate can determine
-     * whether to populate the ring buffer with mutable log events or not. This method may be invoced multiple times
-     * for all AsyncLoggerConfigs that use this delegate.
-     *
-     * @param logEventFactory the factory used
-     */
-    void setLogEventFactory(LogEventFactory logEventFactory);
-}
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache license, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the license for the specific language governing permissions and
+ * limitations under the license.
+ */
+
+package org.apache.logging.log4j.core.async;
+
+import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.core.LogEvent;
+import org.apache.logging.log4j.core.impl.LogEventFactory;
+import org.apache.logging.log4j.core.jmx.RingBufferAdmin;
+
+/**
+ * Encapsulates the mechanism used to log asynchronously. There is one delegate per configuration, which is shared by
+ * all AsyncLoggerConfig objects in the configuration.
+ */
+public interface AsyncLoggerConfigDelegate {
+
+    /**
+     * Creates and returns a new {@code RingBufferAdmin} that instruments the ringbuffer of this
+     * {@code AsyncLoggerConfig}.
+     *
+     * @param contextName name of the {@code LoggerContext}
+     * @param loggerConfigName name of the logger config
+     * @return the RingBufferAdmin that instruments the ringbuffer
+     */
+    RingBufferAdmin createRingBufferAdmin(final String contextName, final String loggerConfigName);
+
+    /**
+     * Returns the {@code EventRoute} for the event with the specified level.
+     *
+     * @param level the level of the event to log
+     * @return the {@code EventRoute}
+     */
+    EventRoute getEventRoute(final Level level);
+
+    /**
+     * Enqueues the {@link LogEvent} on the mixed configuration ringbuffer.
+     * This method must only be used after {@link #tryEnqueue(LogEvent, AsyncLoggerConfig)} returns <code>false</code>
+     * indicating that the ringbuffer is full, otherwise it may incur unnecessary synchronization.
+     */
+    void enqueueEvent(LogEvent event, AsyncLoggerConfig asyncLoggerConfig);
+
+    boolean tryEnqueue(LogEvent event, AsyncLoggerConfig asyncLoggerConfig);
+
+    /**
+     * Notifies the delegate what LogEventFactory an AsyncLoggerConfig is using, so the delegate can determine
+     * whether to populate the ring buffer with mutable log events or not. This method may be invoked multiple times
+     * for all AsyncLoggerConfigs that use this delegate.
+     *
+     * @param logEventFactory the factory used
+     */
+    void setLogEventFactory(LogEventFactory logEventFactory);
+}
diff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/CompositeConfiguration.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/CompositeConfiguration.java
index e9dc3bbc1..08914af1e 100644
--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/CompositeConfiguration.java
+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/CompositeConfiguration.java
@@ -56,7 +56,7 @@ public class CompositeConfiguration extends AbstractConfiguration implements Rec
     private MergeStrategy mergeStrategy;
 
     /**
-     * Construct the ComponsiteConfiguration.
+     * Construct the CompositeConfiguration.
      *
      * @param configurations The List of Configurations to merge.
      */
diff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java
index e76c5f90d..e1fdf51ec 100644
--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java
+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java
@@ -41,7 +41,7 @@ import org.apache.logging.log4j.plugins.util.PluginType;
  * configurations.</li>
  * <li>Filters are aggregated under a CompositeFilter if more than one Filter is defined. Since Filters are not named
  * duplicates may be present.</li>
- * <li>Scripts and ScriptFile references are aggregated. Duplicate definiations replace those in previous
+ * <li>Scripts and ScriptFile references are aggregated. Duplicate definitions replace those in previous
  * configurations.</li>
  * <li>Appenders are aggregated. Appenders with the same name are replaced by those in later configurations, including
  * all of the Appender's subcomponents.</li>
diff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/RegexFilter.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/RegexFilter.java
index d7ab68a2c..6603fbfa0 100644
--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/RegexFilter.java
+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/RegexFilter.java
@@ -107,7 +107,7 @@ public final class RegexFilter extends AbstractFilter {
      * @param regex
      *        The regular expression to match.
      * @param patternFlags
-     *        An array of Stirngs where each String is a {@link Pattern#compile(String, int)} compilation flag.
+     *        An array of Strings where each String is a {@link Pattern#compile(String, int)} compilation flag.
      * @param useRawMsg
      *        If true, the raw message will be used, otherwise the formatted message will be used.
      * @param match
diff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/SslConfiguration.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/SslConfiguration.java
index c39db8d3e..118f2b88b 100644
--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/SslConfiguration.java
+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/SslConfiguration.java
@@ -129,7 +129,7 @@ public class SslConfiguration {
         try {
             return createSslContext(true, false);
         } catch (final KeyStoreConfigurationException dummy) {
-             LOGGER.debug("Exception occured while using default keystore. This should be a BUG");
+             LOGGER.debug("Exception occurred while using default keystore. This should be a BUG");
              return null;
         }
     }
@@ -139,7 +139,7 @@ public class SslConfiguration {
             return createSslContext(false, true);
         }
         catch (final TrustStoreConfigurationException dummy) {
-            LOGGER.debug("Exception occured while using default truststore. This should be a BUG");
+            LOGGER.debug("Exception occurred while using default truststore. This should be a BUG");
             return null;
         }
     }
diff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/LogEventPatternConverter.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/LogEventPatternConverter.java
index 1e31c7ed0..2ff42974f 100644
--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/LogEventPatternConverter.java
+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/LogEventPatternConverter.java
@@ -66,7 +66,7 @@ public abstract class LogEventPatternConverter extends AbstractPatternConverter
     }
 
     /**
-     * Some pattern converters require location informatoin. By returning true the location can be
+     * Some pattern converters require location information. By returning true the location can be
      * calculated efficiently.
      * @return true if this PatternConverter uses location information.
      */
diff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/util/CronExpression.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/util/CronExpression.java
index a850672a0..da580ffc4 100644
--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/util/CronExpression.java
+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/util/CronExpression.java
@@ -1471,7 +1471,7 @@ public final class CronExpression {
                         cl.set(Calendar.MONTH, mon);
                         // no '- 1' here because we are promoting the month
                         continue;
-                    } else if (daysToAdd > 0) { // are we swithing days?
+                    } else if (daysToAdd > 0) { // are we switching days?
                         cl.set(Calendar.SECOND, 0);
                         cl.set(Calendar.MINUTE, 0);
                         cl.set(Calendar.HOUR_OF_DAY, 0);
diff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/util/Watcher.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/util/Watcher.java
index 426307f59..61552a97c 100644
--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/util/Watcher.java
+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/util/Watcher.java
@@ -18,7 +18,6 @@ package org.apache.logging.log4j.core.util;
 
 import java.util.List;
 
-import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.ConfigurationListener;
 import org.apache.logging.log4j.core.config.Reconfigurable;
 
@@ -40,7 +39,6 @@ public interface Watcher {
 
     /**
      * Called when the configuration has been modified.
-     * @param source The location of the configuration that was modified.
      */
     void modified();
 
@@ -52,7 +50,7 @@ public interface Watcher {
 
     /**
      * Returns the time the source was last modified or 0 if it is not available.
-     * @return the time the soruce was last modified.
+     * @return the time the source was last modified.
      */
     long getLastModified();
 
diff --git a/log4j-core/src/test/java/org/apache/logging/log4j/core/CronRolloverApp.java b/log4j-core/src/test/java/org/apache/logging/log4j/core/CronRolloverApp.java
index d149148cc..6bf68c4f0 100644
--- a/log4j-core/src/test/java/org/apache/logging/log4j/core/CronRolloverApp.java
+++ b/log4j-core/src/test/java/org/apache/logging/log4j/core/CronRolloverApp.java
@@ -37,7 +37,7 @@ public class CronRolloverApp {
             }
         } catch (final Exception e) {
             //e.printStackTrace();
-            logger.error("Excepcion general", e);
+            logger.error("Exception general", e);
         }
     }
 }
diff --git a/log4j-core/src/test/java/org/apache/logging/log4j/core/TimestampMessageTest.java b/log4j-core/src/test/java/org/apache/logging/log4j/core/TimestampMessageTest.java
index 188c6f890..728c038fb 100644
--- a/log4j-core/src/test/java/org/apache/logging/log4j/core/TimestampMessageTest.java
+++ b/log4j-core/src/test/java/org/apache/logging/log4j/core/TimestampMessageTest.java
@@ -79,7 +79,7 @@ public class TimestampMessageTest {
     public static class PoisonClock implements Clock {
         public PoisonClock() {
             super();
-            // Breakpoint here for debuging.
+            // Breakpoint here for debugging.
         }
 
         @Override
diff --git a/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java b/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java
index 103a001c8..8e3237718 100644
--- a/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java
+++ b/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java
@@ -150,7 +150,7 @@ public class RollingAppenderSizeTest {
                         in = new CompressorStreamFactory().createCompressorInputStream(ext.name().toLowerCase(), fis);
                     } catch (final CompressorException ce) {
                         ce.printStackTrace();
-                        fail("Error creating intput stream from " + file.toString() + ": " + ce.getMessage());
+                        fail("Error creating input stream from " + file.toString() + ": " + ce.getMessage());
                     }
                     final ByteArrayOutputStream baos = new ByteArrayOutputStream();
                     assertNotNull("No input stream for " + file.getName(), in);
diff --git a/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigTest.java b/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigTest.java
index a11365ede..1e713d52c 100644
--- a/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigTest.java
+++ b/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigTest.java
@@ -74,14 +74,14 @@ public class AsyncLoggerConfigTest {
     	final LoggerConfig rootLoggerConfig =
     			AsyncLoggerConfig.RootLogger.createLogger(
     					null, Level.INFO, null, new AppenderRef[0], null, new DefaultConfiguration(), null);
-    	assertFalse("Include location should default to false for async logggers",
+	assertFalse("Include location should default to false for async loggers",
     			    rootLoggerConfig.isIncludeLocation());
 
     	final LoggerConfig loggerConfig =
     	        AsyncLoggerConfig.createLogger(
     	                false, Level.INFO, "com.foo.Bar", null, new AppenderRef[0], null, new DefaultConfiguration(),
     	        		null);
-    	assertFalse("Include location should default to false for async logggers",
+	assertFalse("Include location should default to false for async loggers",
     			    loggerConfig.isIncludeLocation());
     }
 }
diff --git a/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncRootReloadTest.java b/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncRootReloadTest.java
index 49dec04ac..27ee56029 100644
--- a/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncRootReloadTest.java
+++ b/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncRootReloadTest.java
@@ -51,7 +51,7 @@ public class AsyncRootReloadTest {
         final File configFile = FileUtils.fileFromUri(url.toURI());
 
         final Logger logger = LogManager.getLogger(AsyncRootReloadTest.class);
-        logger.info("Log4j configured, will be reconfigured in aprox. 5 sec");
+        logger.info("Log4j configured, will be reconfigured in approx. 5 sec");
 
         configFile.setLastModified(System.currentTimeMillis());
 
diff --git a/log4j-core/src/test/java/org/apache/logging/log4j/core/config/CompositeConfigurationTest.java b/log4j-core/src/test/java/org/apache/logging/log4j/core/config/CompositeConfigurationTest.java
index cb7b4977a..4ee378347 100644
--- a/log4j-core/src/test/java/org/apache/logging/log4j/core/config/CompositeConfigurationTest.java
+++ b/log4j-core/src/test/java/org/apache/logging/log4j/core/config/CompositeConfigurationTest.java
@@ -157,7 +157,7 @@ public class CompositeConfigurationTest {
                 //Regression
                 //Check level on cat3 (not present in root config)
                 assertEquals("Expected cat3 log level to be ERROR", Level.ERROR, config.getLogger("cat3").getLevel());
-                //Check level on cat1 (not present in overriden config)
+                //Check level on cat1 (not present in overridden config)
                 assertEquals("Expected cat1 log level to be DEBUG", Level.DEBUG, config.getLogger("cat1").getLevel());
             }
         };
diff --git a/log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/validators/RequiredValidatorTest.java b/log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/validators/RequiredValidatorTest.java
index f5de6496c..c2dd9d4d2 100644
--- a/log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/validators/RequiredValidatorTest.java
+++ b/log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/validators/RequiredValidatorTest.java
@@ -38,7 +38,7 @@ public class RequiredValidatorTest {
         final PluginManager manager = new PluginManager("Test");
         manager.collectPlugins();
         plugin = (PluginType<ValidatingPlugin>) manager.getPluginType("Validator");
-        assertNotNull("Rebuild this module to make sure annotaion processing kicks in.", plugin);
+        assertNotNull("Rebuild this module to make sure annotation processing kicks in.", plugin);
         node = new Node(null, "Validator", plugin);
     }
 
diff --git a/log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/validators/ValidatingPluginWithGenericBuilderTest.java b/log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/validators/ValidatingPluginWithGenericBuilderTest.java
index d70f35818..814ac68d6 100644
--- a/log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/validators/ValidatingPluginWithGenericBuilderTest.java
+++ b/log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/validators/ValidatingPluginWithGenericBuilderTest.java
@@ -40,7 +40,7 @@ public class ValidatingPluginWithGenericBuilderTest {
         final PluginManager manager = new PluginManager("Test");
         manager.collectPlugins();
         plugin = (PluginType<ValidatingPluginWithGenericBuilder>) manager.getPluginType("ValidatingPluginWithGenericBuilder");
-        assertNotNull("Rebuild this module to make sure annotaion processing kicks in.", plugin);
+        assertNotNull("Rebuild this module to make sure annotation processing kicks in.", plugin);
         node = new Node(null, "Validator", plugin);
     }
 
diff --git a/log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/validators/ValidatingPluginWithGenericSubclassFoo1BuilderTest.java b/log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/validators/ValidatingPluginWithGenericSubclassFoo1BuilderTest.java
index d567a4092..bea4e5a1d 100644
--- a/log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/validators/ValidatingPluginWithGenericSubclassFoo1BuilderTest.java
+++ b/log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/validators/ValidatingPluginWithGenericSubclassFoo1BuilderTest.java
@@ -40,7 +40,7 @@ public class ValidatingPluginWithGenericSubclassFoo1BuilderTest {
         final PluginManager manager = new PluginManager("Test");
         manager.collectPlugins();
         plugin = (PluginType<PluginWithGenericSubclassFoo1Builder>) manager.getPluginType("PluginWithGenericSubclassFoo1Builder");
-        assertNotNull("Rebuild this module to make sure annotaion processing kicks in.", plugin);
+        assertNotNull("Rebuild this module to make sure annotation processing kicks in.", plugin);
         node = new Node(null, "Validator", plugin);
     }
 
diff --git a/log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/validators/ValidatingPluginWithTypedBuilderTest.java b/log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/validators/ValidatingPluginWithTypedBuilderTest.java
index 839bcafd4..0f00d462a 100644
--- a/log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/validators/ValidatingPluginWithTypedBuilderTest.java
+++ b/log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/validators/ValidatingPluginWithTypedBuilderTest.java
@@ -41,7 +41,7 @@ public class ValidatingPluginWithTypedBuilderTest {
         manager.collectPlugins();
         plugin = (PluginType<ValidatingPluginWithTypedBuilder>) manager
                 .getPluginType("ValidatingPluginWithTypedBuilder");
-        assertNotNull("Rebuild this module to make sure annotaion processing kicks in.", plugin);
+        assertNotNull("Rebuild this module to make sure annotation processing kicks in.", plugin);
         node = new Node(null, "Validator", plugin);
     }
 
diff --git a/log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/MainInputArgumentsMapLookup.java b/log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/MainInputArgumentsMapLookup.java
index f6bad2251..cce9d1e03 100644
--- a/log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/MainInputArgumentsMapLookup.java
+++ b/log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/MainInputArgumentsMapLookup.java
@@ -34,7 +34,7 @@ public class MainInputArgumentsMapLookup extends MapLookup {
             final StackTraceElement[] stackTraceElements = entry.getValue();
             entry.getKey();
             // Can't use the thread name to look for "main" since anyone can set it.
-            // Can't use thread ID since it can be any positive value, and is likely vender dependent. Oracle seems to
+            // Can't use thread ID since it can be any positive value, and is likely vendor dependent. Oracle seems to
             // use 1.
             // We are left to look for "main" at the top of the stack
             if (stackTraceElements != null) {
diff --git a/log4j-core/src/test/java/org/apache/logging/log4j/core/util/CronExpressionTest.java b/log4j-core/src/test/java/org/apache/logging/log4j/core/util/CronExpressionTest.java
index 54bf666bd..c00d2f094 100644
--- a/log4j-core/src/test/java/org/apache/logging/log4j/core/util/CronExpressionTest.java
+++ b/log4j-core/src/test/java/org/apache/logging/log4j/core/util/CronExpressionTest.java
@@ -95,7 +95,7 @@ public class CronExpressionTest {
     }
 
     /**
-     * 35,45, and 55 minutes past the hour evern hour.
+     * 35,45, and 55 minutes past the hour every hour.
      */
     @Test
     public void testPrevFireTime3() throws Exception {
diff --git a/log4j-core/src/test/java/org/apache/logging/log4j/test/appender/ListAppender.java b/log4j-core/src/test/java/org/apache/logging/log4j/test/appender/ListAppender.java
index 150d010e5..7f7bbf708 100644
--- a/log4j-core/src/test/java/org/apache/logging/log4j/test/appender/ListAppender.java
+++ b/log4j-core/src/test/java/org/apache/logging/log4j/test/appender/ListAppender.java
@@ -83,7 +83,7 @@ public class ListAppender extends AbstractAppender {
      *     listAppender.countDownLatch = new CountDownLatch(1);
      *
      *     Logger logger = LogManager.getLogger();
-     *     logger.info("log one event anynchronously");
+     *     logger.info("log one event asynchronously");
      *
      *     // wait for the appender to finish processing this event (wait max 1 second)
      *     listAppender.countDownLatch.await(1, TimeUnit.SECONDS);
diff --git a/log4j-csv/src/site/manual/index.md b/log4j-csv/src/site/manual/index.md
index 66fe24fe3..84fca1379 100644
--- a/log4j-csv/src/site/manual/index.md
+++ b/log4j-csv/src/site/manual/index.md
@@ -18,7 +18,7 @@
 
 # Apache Log4j ZeroMQ using JeroMQ module
 
-As of Log4j 2.11.0, ZeroMQ using JeroMQ support has moved from the existing module logj-core to the new module log4j-jeromq.
+As of Log4j 2.11.0, ZeroMQ using JeroMQ support has moved from the existing module log4j-core to the new module log4j-jeromq.
 
 ## Requirements
 
diff --git a/log4j-docker/src/main/java/org/apache/logging/log4j/docker/DockerLookup.java b/log4j-docker/src/main/java/org/apache/logging/log4j/docker/DockerLookup.java
index 8d6255e12..cd2c1cbcf 100644
--- a/log4j-docker/src/main/java/org/apache/logging/log4j/docker/DockerLookup.java
+++ b/log4j-docker/src/main/java/org/apache/logging/log4j/docker/DockerLookup.java
@@ -52,7 +52,7 @@ public class DockerLookup extends AbstractLookup {
             baseUri = props.getStringProperty(DOCKER_URI);
         }
         if (baseUri == null) {
-            LOGGER.warn("No Docker URI provided. Docker information is unavailble");
+            LOGGER.warn("No Docker URI provided. Docker information is unavailable");
         }
         Container current = null;
         try {
diff --git a/log4j-docker/src/site/markdown/index.md.vm b/log4j-docker/src/site/markdown/index.md.vm
index e717fb9cd..969e8e51a 100644
--- a/log4j-docker/src/site/markdown/index.md.vm
+++ b/log4j-docker/src/site/markdown/index.md.vm
@@ -25,7 +25,7 @@ Log4j supports Docker by providing a Lookup to retrieve container information.
 
 $h2 Accessing Docker
 
-The Log4j Docker support requires access to the Docker REST intrerface. In practical terms this means the
+The Log4j Docker support requires access to the Docker REST interface. In practical terms this means the
 application either needs access to unix:///var/run/docker.sock through a volume mount (not recommended),
 bind Docker to another host/port or unix socket. or use a proxy application to provide access. The
 [Log4j Spring Cloud sample application](https://github.com/apache/logging-log4j2/tree/master/log4j-spring-cloud-config/log4j-spring-cloud-config-samples/log4j-spring-cloud-config-sample-application)
diff --git a/log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/Log4jEventSource.java b/log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/Log4jEventSource.java
index d444db551..7dd573c39 100644
--- a/log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/Log4jEventSource.java
+++ b/log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/Log4jEventSource.java
@@ -58,7 +58,7 @@ public class Log4jEventSource extends AbstractSource implements EventDrivenSourc
         try {
             getChannelProcessor().processEvent(event);
         } catch (final ChannelException ex) {
-            LOGGER.warn("Unabled to process event {}" + event, ex);
+            LOGGER.warn("Unable to process event {}" + event, ex);
             throw ex;
         }
         sourceCounter.incrementAppendAcceptedCount();
diff --git a/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalBufferedInputStream.java b/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalBufferedInputStream.java
index 9f04ed3ac..bf1490c7b 100644
--- a/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalBufferedInputStream.java
+++ b/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalBufferedInputStream.java
@@ -28,7 +28,7 @@ import org.apache.logging.log4j.io.LoggerInputStream;
 import org.apache.logging.log4j.spi.ExtendedLogger;
 
 /**
- * Internal class that exists primiarly to allow location calculations to work.
+ * Internal class that exists primarily to allow location calculations to work.
  * @since 2.12
  */
 public class InternalBufferedInputStream extends BufferedInputStream {
diff --git a/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalBufferedReader.java b/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalBufferedReader.java
index 90452a406..03799127b 100644
--- a/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalBufferedReader.java
+++ b/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalBufferedReader.java
@@ -27,7 +27,7 @@ import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.spi.ExtendedLogger;
 
 /**
- * Internal class that exists primiarly to allow location calculations to work.
+ * Internal class that exists primarily to allow location calculations to work.
  * @since 2.12
  */
 public class InternalBufferedReader extends BufferedReader {
diff --git a/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalFilterOutputStream.java b/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalFilterOutputStream.java
index a72681870..112e1dddc 100644
--- a/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalFilterOutputStream.java
+++ b/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalFilterOutputStream.java
@@ -28,7 +28,7 @@ import org.apache.logging.log4j.io.ByteStreamLogger;
 import org.apache.logging.log4j.spi.ExtendedLogger;
 
 /**
- * Internal class that exists primiarly to allow location calculations to work.
+ * Internal class that exists primarily to allow location calculations to work.
  *
  * @since 2.12
  */
diff --git a/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalPrintWriter.java b/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalPrintWriter.java
index f8f8c92fc..d673fc82e 100644
--- a/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalPrintWriter.java
+++ b/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalPrintWriter.java
@@ -28,7 +28,7 @@ import org.apache.logging.log4j.io.LoggerWriter;
 import org.apache.logging.log4j.spi.ExtendedLogger;
 
 /**
- * Internal class that exists primiarly to allow location calculations to work.
+ * Internal class that exists primarily to allow location calculations to work.
  *
  * @since 2.12
  */
diff --git a/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalReader.java b/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalReader.java
index 40f9fd100..932ae9b47 100644
--- a/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalReader.java
+++ b/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalReader.java
@@ -28,7 +28,7 @@ import org.apache.logging.log4j.io.CharStreamLogger;
 import org.apache.logging.log4j.spi.ExtendedLogger;
 
 /**
- * Internal class that exists primiarly to allow location calculations to work.
+ * Internal class that exists primarily to allow location calculations to work.
  *
  * @since 2.12
  */
diff --git a/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalWriter.java b/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalWriter.java
index 11deeab57..b117a575a 100644
--- a/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalWriter.java
+++ b/log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalWriter.java
@@ -26,7 +26,7 @@ import org.apache.logging.log4j.io.CharStreamLogger;
 import org.apache.logging.log4j.spi.ExtendedLogger;
 
 /**
- * Internal class that exists primiarly to allow location calculations to work.
+ * Internal class that exists primarily to allow location calculations to work.
  * @since 2.12
  */
 public class InternalWriter extends Writer {
diff --git a/log4j-jdbc/src/site/manual/index.md b/log4j-jdbc/src/site/manual/index.md
index 66fe24fe3..84fca1379 100644
--- a/log4j-jdbc/src/site/manual/index.md
+++ b/log4j-jdbc/src/site/manual/index.md
@@ -18,7 +18,7 @@
 
 # Apache Log4j ZeroMQ using JeroMQ module
 
-As of Log4j 2.11.0, ZeroMQ using JeroMQ support has moved from the existing module logj-core to the new module log4j-jeromq.
+As of Log4j 2.11.0, ZeroMQ using JeroMQ support has moved from the existing module log4j-core to the new module log4j-jeromq.
 
 ## Requirements
 
diff --git a/log4j-jeromq/src/site/manual/index.md b/log4j-jeromq/src/site/manual/index.md
index 66fe24fe3..84fca1379 100644
--- a/log4j-jeromq/src/site/manual/index.md
+++ b/log4j-jeromq/src/site/manual/index.md
@@ -18,7 +18,7 @@
 
 # Apache Log4j ZeroMQ using JeroMQ module
 
-As of Log4j 2.11.0, ZeroMQ using JeroMQ support has moved from the existing module logj-core to the new module log4j-jeromq.
+As of Log4j 2.11.0, ZeroMQ using JeroMQ support has moved from the existing module log4j-core to the new module log4j-jeromq.
 
 ## Requirements
 
diff --git a/log4j-jms/src/site/manual/index.md b/log4j-jms/src/site/manual/index.md
index 8ef1b4754..295c2d563 100644
--- a/log4j-jms/src/site/manual/index.md
+++ b/log4j-jms/src/site/manual/index.md
@@ -18,7 +18,7 @@
 
 # Apache Log4j Java Message Service (JMS) module
 
-As of Log4j 2.11.0, JMS support has moved from the existing module logj-core to the new module log4j-jms.
+As of Log4j 2.11.0, JMS support has moved from the existing module log4j-core to the new module log4j-jms.
 
 ## Requirements
 
diff --git a/log4j-jpa/src/site/manual/index.md b/log4j-jpa/src/site/manual/index.md
index 235dfb85a..6b1b12eef 100644
--- a/log4j-jpa/src/site/manual/index.md
+++ b/log4j-jpa/src/site/manual/index.md
@@ -18,7 +18,7 @@
 
 # Log4j Java Persistence API module
 
-As of Log4j 2.11.0, JPA support has moved from the existing module logj-core to the new module log4j-jpa.
+As of Log4j 2.11.0, JPA support has moved from the existing module log4j-core to the new module log4j-jpa.
 
 ## Requirements
 
diff --git a/log4j-jul/src/site/markdown/index.md b/log4j-jul/src/site/markdown/index.md
index 3e0ff65a1..683d139e4 100644
--- a/log4j-jul/src/site/markdown/index.md
+++ b/log4j-jul/src/site/markdown/index.md
@@ -18,7 +18,7 @@
 
 There are two possibilities:
 - Logging Adapter as complete replacement (preferred, but requires JVM start option)
-- Bridge Handler, transfering JDK output to log4j, e.g. useful for webapps
+- Bridge Handler, transferring JDK output to log4j, e.g. useful for webapps
 
 
 # Log4j JDK Logging Adapter
@@ -83,7 +83,7 @@ Java Level | Log4j Level
 
 # Log4j JDK Logging Bridge Handler
 
-The LogManager is not always useable because you have to set a JVM wide effective system
+The LogManager is not always usable because you have to set a JVM wide effective system
 property - e.g. in web servers this is not possible if you are not the administrator.
 
 The [`Log4jBridgeHandler`](apidocs/org/apache/logging/log4j/jul/Log4jBridgeHandler.html) is an
diff --git a/log4j-kafka/src/site/manual/index.md b/log4j-kafka/src/site/manual/index.md
index d70256ab5..1438ee1d4 100644
--- a/log4j-kafka/src/site/manual/index.md
+++ b/log4j-kafka/src/site/manual/index.md
@@ -18,7 +18,7 @@
 
 # Apache Log4j Kafka module
 
-As of Log4j 2.11.0, Kafka support has moved from the existing module logj-core to the new module log4j-kafka.
+As of Log4j 2.11.0, Kafka support has moved from the existing module log4j-core to the new module log4j-kafka.
 
 ## Requirements
 
diff --git a/log4j-layout-jackson-json/src/site/manual/index.md b/log4j-layout-jackson-json/src/site/manual/index.md
index 6cadb7850..6459110f3 100644
--- a/log4j-layout-jackson-json/src/site/manual/index.md
+++ b/log4j-layout-jackson-json/src/site/manual/index.md
@@ -18,7 +18,7 @@
 
 # Apache Log4j Layout for Jackson JSON module
 
-As of Log4j 3.0.0, the layout based on Jackson JSON has moved from the existing module logj-core to the new modules log4j-layout-jackson-json.
+As of Log4j 3.0.0, the layout based on Jackson JSON has moved from the existing module log4j-core to the new modules log4j-layout-jackson-json.
 
 ## Requirements
 
diff --git a/log4j-layout-jackson-xml/src/site/manual/index.md b/log4j-layout-jackson-xml/src/site/manual/index.md
index 216fe0568..b46d3680f 100644
--- a/log4j-layout-jackson-xml/src/site/manual/index.md
+++ b/log4j-layout-jackson-xml/src/site/manual/index.md
@@ -18,7 +18,7 @@
 
 # Apache Log4j Layout for Jackson XML module
 
-As of Log4j 3.0.0, the layout based on Jackson XML has moved from the existing module logj-core to the new modules log4j-layout-jackson-xml.
+As of Log4j 3.0.0, the layout based on Jackson XML has moved from the existing module log4j-core to the new modules log4j-layout-jackson-xml.
 
 ## Requirements
 
diff --git a/log4j-layout-jackson-yaml/src/site/manual/index.md b/log4j-layout-jackson-yaml/src/site/manual/index.md
index 83112afdc..6fb90f1df 100644
--- a/log4j-layout-jackson-yaml/src/site/manual/index.md
+++ b/log4j-layout-jackson-yaml/src/site/manual/index.md
@@ -18,7 +18,7 @@
 
 # Apache Log4j Layout for Jackson YAML module
 
-As of Log4j 3.0.0, the layout based on Jackson YAML has moved from the existing module logj-core to the new modules log4j-layout-jackson-yaml.
+As of Log4j 3.0.0, the layout based on Jackson YAML has moved from the existing module log4j-core to the new modules log4j-layout-jackson-yaml.
 
 ## Requirements
 
diff --git a/log4j-layout-jackson/src/main/java/org/apache/logging/log4j/jackson/AbstractJacksonLayout.java b/log4j-layout-jackson/src/main/java/org/apache/logging/log4j/jackson/AbstractJacksonLayout.java
index 2773fbc13..d087a2ea7 100644
--- a/log4j-layout-jackson/src/main/java/org/apache/logging/log4j/jackson/AbstractJacksonLayout.java
+++ b/log4j-layout-jackson/src/main/java/org/apache/logging/log4j/jackson/AbstractJacksonLayout.java
@@ -352,7 +352,7 @@ public abstract class AbstractJacksonLayout extends AbstractStringLayout {
             // This class combines LogEvent with AdditionalFields during serialization
             return createLogEventWithAdditionalFields(event, additionalFieldsMap);
         } else if (event instanceof Message) {
-            // If the LogEvent implements the Messagee interface Jackson will not treat is as a LogEvent.
+            // If the LogEvent implements the Message interface Jackson will not treat is as a LogEvent.
             return new ReadOnlyLogEventWrapper(event);
             // No additional fields, return original object
         }
diff --git a/log4j-layout-jackson/src/site/manual/index.md b/log4j-layout-jackson/src/site/manual/index.md
index b1d22b6bb..8f3b15d7d 100644
--- a/log4j-layout-jackson/src/site/manual/index.md
+++ b/log4j-layout-jackson/src/site/manual/index.md
@@ -18,7 +18,7 @@
 
 # Apache Log4j Layout for Jackson module
 
-As of Log4j 3.0.0, common code for layouts based on Jackson have moved from the existing module logj-core to the new modules log4j-layout-jackson.
+As of Log4j 3.0.0, common code for layouts based on Jackson have moved from the existing module log4j-core to the new modules log4j-layout-jackson.
 
 ## Requirements
 
diff --git a/log4j-osgi/src/test/java/org/apache/logging/log4j/osgi/tests/AbstractLoadBundleTest.java b/log4j-osgi/src/test/java/org/apache/logging/log4j/osgi/tests/AbstractLoadBundleTest.java
index 3d09f6b16..505732f5d 100644
--- a/log4j-osgi/src/test/java/org/apache/logging/log4j/osgi/tests/AbstractLoadBundleTest.java
+++ b/log4j-osgi/src/test/java/org/apache/logging/log4j/osgi/tests/AbstractLoadBundleTest.java
@@ -271,7 +271,7 @@ public abstract class AbstractLoadBundleTest extends AbstractOsgiTest {
             final String result = baos.toString().substring(
                 12).trim(); // remove the instant then the spaces at start and end, that are non constant
             String expected = "[main] ERROR org.apache.logging.log4j.configuration.CustomConfiguration - Test OK";
-            Assert.assertTrue("Incorrect string. Expected string ends woth: " + expected + " Actual: " + result,
+            Assert.assertTrue("Incorrect string. Expected string ends with: " + expected + " Actual: " + result,
                     result.endsWith(expected));
         } finally {
             System.setOut(bakStream);
diff --git a/log4j-smtp/src/site/manual/index.md b/log4j-smtp/src/site/manual/index.md
index 318d365b4..644329853 100644
--- a/log4j-smtp/src/site/manual/index.md
+++ b/log4j-smtp/src/site/manual/index.md
@@ -18,7 +18,7 @@
 
 # Apache Log4j Simple Mail Transfer Protocol module
 
-As of Log4j 2.11.0, Simple Mail Transfer Protocol (SMTP) support has moved from the existing module logj-core to the new module log4j-smtp.
+As of Log4j 2.11.0, Simple Mail Transfer Protocol (SMTP) support has moved from the existing module log4j-core to the new module log4j-smtp.
 
 ## Requirements
 
diff --git a/log4j-spring-cloud-config/log4j-spring-cloud-config-client/src/site/markdown/index.md b/log4j-spring-cloud-config/log4j-spring-cloud-config-client/src/site/markdown/index.md
index fee97780d..0a4850097 100644
--- a/log4j-spring-cloud-config/log4j-spring-cloud-config-client/src/site/markdown/index.md
+++ b/log4j-spring-cloud-config/log4j-spring-cloud-config-client/src/site/markdown/index.md
@@ -63,7 +63,7 @@ TLS can be enabled by adding the following system properties or defining them in
 | ------------- |-------|:-------------| 
 | log4j2.trustStoreLocation  | Optional | The location of the trust store. If not provided the default trust store will be used.| 
 | log4j2.trustStorePassword  | Optional | Password needed to access the trust store. |
-| log4j2.trustStorePasswordFile | Optinoal | The location of a file that contains the password for the trust store. |
+| log4j2.trustStorePasswordFile | Optional | The location of a file that contains the password for the trust store. |
 | log4j2.trustStorePasswordEnvironmentVariable | Optional | The name of the environment variable that contains the trust store password. |
 | log4j2.trustStorePeyStoreType | Required if keystore location provided | The type of key store.  |
 | log4j2.trustStoreKeyManagerFactoryAlgorithm | Optional | Java cryptographic algorithm. |
diff --git a/src/site/asciidoc/index.adoc b/src/site/asciidoc/index.adoc
index 5e1c80abd..ed6a03c2e 100644
--- a/src/site/asciidoc/index.adoc
+++ b/src/site/asciidoc/index.adoc
@@ -35,7 +35,7 @@ in front of other logging implementations such as Logback. The Log4j API has sev
 . The Log4j API supports lambda expressions.
 . The Log4j API provides many more logging methods than SLF4J.
 . In addition to the "parameterized logging" format supported by SLF4J, the Log4j API also supports events using
-the java.text.MessageFormat syntax as well printf-sytle messages.
+the java.text.MessageFormat syntax as well printf-style messages.
 . The Log4j API provides a LogManager.shutdown() method. The underlying logging implementation must implement the
 Terminable interface for the method to have effect.
 . Other constructs such as Markers, log Levels, and ThreadContext (aka MDC) are fully supported.
@@ -110,8 +110,8 @@ Version 2.10.0 introduces a the module log4j-appserver to improve integration wi
 
 === Cloud Enabled
 
-Version 2.12.0 introduces support for accessing Dcoker container information via a Lookup and for accessing
-and updating the Log4j configuration through Spring Clooud Configuration. See [Logging in the Cloud](manual/cloud.html)
+Version 2.12.0 introduces support for accessing Docker container information via a Lookup and for accessing
+and updating the Log4j configuration through Spring Cloud Configuration. See [Logging in the Cloud](manual/cloud.html)
 for details.
 
 == Documentation
diff --git a/src/site/asciidoc/manual/appenders.adoc b/src/site/asciidoc/manual/appenders.adoc
index 05fb7b9ed..430d34784 100644
--- a/src/site/asciidoc/manual/appenders.adoc
+++ b/src/site/asciidoc/manual/appenders.adoc
@@ -86,7 +86,7 @@ is 1024. Note that when using a disruptor-style `BlockingQueue`, this
 buffer size must be a power of 2.
 
 When the application is logging faster than the underlying appender can
-keep up with for a long enough time to fill up the queue, the behavious
+keep up with for a long enough time to fill up the queue, the behaviour
 is determined by the
 link:../log4j-core/apidocs/org/apache/logging/log4j/core/async/AsyncQueueFullPolicy.html[`AsyncQueueFullPolicy`].
 
@@ -839,7 +839,7 @@ an embedded Flume Agent.
 == JDBCAppender
 
 As of Log4j 2.11.0, JDBC support has moved from the existing module
-`logj-core` to the new module `log4j-jdbc`.
+`log4j-core` to the new module `log4j-jdbc`.
 
 The JDBCAppender writes log events to a relational database table using
 standard JDBC. It can be configured to obtain JDBC connections using a
@@ -1248,7 +1248,7 @@ table based on a Log4j `MapMessage` instead of values from `LogEvent`s.
 
 [[JMSQueueAppender]] [[JMSTopicAppender]]
 As of Log4j 2.11.0, JPA support has moved from the existing module
-`logj-core` to the new module `log4j-jms`.
+`log4j-core` to the new module `log4j-jms`.
 
 The JMS Appender sends the formatted log event to a JMS Destination.
 
@@ -1377,7 +1377,7 @@ layout of the appender to `MessageLayout` with `<MessageLayout />`
 == JPAAppender
 
 As of Log4j 2.11.0, JPA support has moved from the existing module
-`logj-core` to the new module `log4j-jpa`.
+`log4j-core` to the new module `log4j-jpa`.
 
 The JPAAppender writes log events to a relational database table using
 the Java Persistence API 2.1. It requires the API and a provider
@@ -1636,7 +1636,7 @@ Here is a sample HttpAppender configuration snippet:
 == KafkaAppender
 
 As of Log4j 2.11.0, https://kafka.apache.org/[Apache Kafka] support has
-moved from the existing module `logj-core` to the new module
+moved from the existing module `log4j-core` to the new module
 `log4j-kafka`.
 
 The KafkaAppender logs events to an https://kafka.apache.org/[Apache
@@ -2844,7 +2844,7 @@ DirectWrite Rollover Strategy
 The DirectWriteRolloverStrategy causes log events to be written directly
 to files represented by the file pattern. With this strategy file
 renames are not performed. If the size-based triggering policy causes
-multiple files to be written durring the specified time period they will
+multiple files to be written during the specified time period they will
 be numbered starting at one and continually incremented until a
 time-based rollover occurs.
 
@@ -3432,7 +3432,7 @@ https://docs.oracle.com/javase/7/docs/api/java/nio/file/attribute/FileOwnerAttri
 attribute view.
 
 |fileGroup |String a|
-File group to define whene action is executed.
+File group to define when action is executed.
 
 Underlying files system shall support
 https://docs.oracle.com/javase/7/docs/api/java/nio/file/attribute/PosixFileAttributeView.html[POSIX]
@@ -3932,7 +3932,7 @@ created as needed.
 == SMTPAppender
 
 As of Log4j 2.11.0, Simple Mail Transfer Protocol (SMTP) support has
-moved from the existing module `logj-core` to the new module
+moved from the existing module `log4j-core` to the new module
 `log4j-smtp`.
 
 Sends an e-mail when a specific logging event occurs, typically on
@@ -4460,7 +4460,7 @@ conforms with either the BSD Syslog format or the RFC 5424 format.
 == JeroMQAppender
 
 As of Log4j 2.11.0, ZeroMQ/JeroMQ support has moved from the existing
-module `logj-core` to the new module `log4j-jeromq`.
+module `log4j-core` to the new module `log4j-jeromq`.
 
 The ZeroMQ appender uses the https://github.com/zeromq/jeromq[JeroMQ]
 library to send log events to one or more ZeroMQ endpoints.
diff --git a/src/site/asciidoc/manual/async.adoc b/src/site/asciidoc/manual/async.adoc
index 225a789e5..3b63d62af 100644
--- a/src/site/asciidoc/manual/async.adoc
+++ b/src/site/asciidoc/manual/async.adoc
@@ -205,7 +205,7 @@ at first use and will never grow or shrink during the life of the
 system.
 
 When the application is logging faster than the underlying appender can
-keep up with for a long enough time to fill up the queue, the behavious
+keep up with for a long enough time to fill up the queue, the behaviour
 is determined by the
 link:../log4j-core/apidocs/org/apache/logging/log4j/core/async/AsyncQueueFullPolicy.html[AsyncQueueFullPolicy].
 
diff --git a/src/site/asciidoc/manual/configuration.adoc b/src/site/asciidoc/manual/configuration.adoc
index 3ac6ecc00..758547063 100644
--- a/src/site/asciidoc/manual/configuration.adoc
+++ b/src/site/asciidoc/manual/configuration.adoc
@@ -789,7 +789,7 @@ will then be expected to be defined in sets of properties that begin
 with _component.<.identifier>._. The identifier does not have to match
 the name of the component being defined but must uniquely identify all
 the attributes and subcomponents that are part of the component. If the
-list of identifiers is not present the identier must not contain a '.'.
+list of identifiers is not present the identifier must not contain a '.'.
 Each individual component MUST have a "type" attribute specified that
 identifies the component's Plugin type.
 
@@ -899,7 +899,7 @@ has no parent.
 === Configuring Appenders
 
 An appender is configured either using the specific appender plugin's
-name or with an appender element and the type attibute containing the
+name or with an appender element and the type attribute containing the
 appender plugin's name. In addition each appender must have a name
 attribute specified with a value that is unique within the set of
 appenders. The name will be used by loggers to reference the appender as
@@ -1052,7 +1052,7 @@ originate from. To accommodate this, Log4j also supports the syntax
 `${prefix:name}` where the prefix identifies tells Log4j that variable
 name should be evaluated in a specific context. See the
 link:lookups.html[Lookups] manual page for more details. The contexts
-that are built in to Logj4 are:
+that are built in to Log4j are:
 
 [cols="1m,5"]
 |===
@@ -2088,7 +2088,7 @@ System Properties] for details.
 |Default LoggerAdapter to use in the JUL adapter.
 By default, if log4j-core is available, then the class
 `org.apache.logging.log4j.jul .CoreLoggerAdapter` will be used.
-Otherwise, the `ApiLogggerAdapter` will be used. Custom implementations
+Otherwise, the `ApiLoggerAdapter` will be used. Custom implementations
 must provide a public default constructor.
 
 |[[formatMsgAsync]]log4j2.formatMsgAsync +
diff --git a/src/site/asciidoc/manual/layouts.adoc b/src/site/asciidoc/manual/layouts.adoc
index 8f770d6ff..f5bcc4103 100644
--- a/src/site/asciidoc/manual/layouts.adoc
+++ b/src/site/asciidoc/manual/layouts.adoc
@@ -41,7 +41,7 @@ performance significantly.
 == CSV Layouts
 
 As of Log4j 2.11.0, CSV support has moved from the existing module
-`logj-core` to the new module `log4j-csv`.
+`log4j-core` to the new module `log4j-csv`.
 
 This layout creates
 https://en.wikipedia.org/wiki/Comma-separated_values[Comma Separated
@@ -1669,7 +1669,7 @@ The ScriptPatternSelector executes a script as descibed in the
 link:../configuration.html#Scripts[Scripts] section of the Configuration
 chapter. The script is passed all the properties configured in the
 Properties section of the configuration, the StrSubstitutor used by the
-Confguration in the "substitutor" vairables, and the log event in the
+Confguration in the "substitutor" variables, and the log event in the
 "logEvent" variable, and is expected to return the value of the
 PatternMatch key that should be used, or null if the default pattern
 should be used.
diff --git a/src/site/asciidoc/manual/logbuilder.adoc b/src/site/asciidoc/manual/logbuilder.adoc
index a7af08835..0eba5bba5 100644
--- a/src/site/asciidoc/manual/logbuilder.adoc
+++ b/src/site/asciidoc/manual/logbuilder.adoc
@@ -59,7 +59,7 @@ The table below shows some of the results from the FileAppenderBenchmark and Fil
 classes in the log4j-perf project when configured to use 4 threads. The results show that lazily including
 the location information is about 8 times slower than not including location information. While using the
 withLocation method of LogBuilder is about 3 times faster than lazily calculating the location information
-it is still about 2.5 times slower than not including locatoin information.
+it is still about 2.5 times slower than not including location information.
 
 The tests were run on a 2018 MacBook Pro with a 2.9 GHz Intel Core i9 processor with 6 cores, 32 GB of memory
 and 1 TB of SSD storage on Java 11 using Log4j 2.13.0 and Logback 1.2.3.
@@ -73,7 +73,7 @@ image:../images/LocationPerf.png[Location Performance]
 |Logback File|159,116.538 ± 1884.969  ops/s|1,240,438.384 ± 76619.873  ops/s
 |===
 As expected, when using LogBuilder with a call to the withLocation() method logging is much faster when
-location informatoin is used in the output but significantly slower when it is not.
+location information is used in the output but significantly slower when it is not.
 
 Note: Running the tests at various times provides varying results. Although some results have been as much
 as 10% higher all results are generally affected similarly so the comparisons between them stay the same.
\ No newline at end of file
diff --git a/src/site/asciidoc/manual/plugins.adoc b/src/site/asciidoc/manual/plugins.adoc
index bc0a7e2f9..0dca83b69 100644
--- a/src/site/asciidoc/manual/plugins.adoc
+++ b/src/site/asciidoc/manual/plugins.adoc
@@ -46,7 +46,7 @@ class as an OSGi service.
 in your log4j2 configuration file.
 6. Serialized plugin listing files on the classpath. These files were generated by
 the plugin annotation processor in Log4j 2 2.x. These are processed to allow
-compatbility.
+compatibility.
 
 If multiple Plugins specify the same (case-insensitive) `name`, then the
 load order above determines which one will be used. For example, to
diff --git a/src/site/asciidoc/manual/usage.adoc b/src/site/asciidoc/manual/usage.adoc
index 513add838..76f1629b1 100644
--- a/src/site/asciidoc/manual/usage.adoc
+++ b/src/site/asciidoc/manual/usage.adoc
@@ -20,7 +20,7 @@
 [#Static_vs_Non_Static]
 == Static vs Non-Static Loggers
 As with any variable in Java, Loggers may be declared as static variables or class member variables. However,
-there are a few factors to consider when choosing to delare a logger as static vs non-static. Generally, it
+there are a few factors to consider when choosing to declare a logger as static vs non-static. Generally, it
 is better to declare Loggers as static.
 
 1. Instantiation of a new Logger is a fairly expensive operation when using the default ContextSelector,
@@ -194,7 +194,7 @@ method is in Child that is the class name that appears.
 7. Logging is performed in the parent class using the logger of Child. The logger name matches the name of the child
 and so it is printed.
 8. Logging is performed in the parent class using the logger of the Child. Although the method was called against
-the Child instance it is implemented in PArent so that is what appears as the class name.
+the Child instance it is implemented in Parent so that is what appears as the class name.
 9. Logging is performed in Child using the logger in the parent which is set to the child logger, so the name of the
 child is printed as the logger name.
 10. Logging is performed in Child using the logger in the parent, which is set to the child logger. Since
diff --git a/src/site/markdown/manual/cloud.md b/src/site/markdown/manual/cloud.md
index fdde0f879..3663fb9d7 100644
--- a/src/site/markdown/manual/cloud.md
+++ b/src/site/markdown/manual/cloud.md
@@ -21,7 +21,7 @@
 ## The Twelve-Factor Application
 
 The Logging Guidelines for [The Twelve-Factor App](https://12factor.net/logs) state that all logs should be routed 
-unbuffered to stdout. Since this is the least common denominator it is guaranteed to work for all applications. Howeever,
+unbuffered to stdout. Since this is the least common denominator it is guaranteed to work for all applications. However,
 as with any set of general guidelines, choosing the least common denominator approach comes at a cost. Some of the costs
 in Java applications include:
 
@@ -114,7 +114,7 @@ being configured with a list of hosts and ports so high availability is not an i
 
 Spring Boot provides another least common denominator approach to logging configuration. It will let you set the 
 log level for various Loggers within an application which can be dynamically updated via REST endpoints provided 
-by Spring. While this works in a lot of cases it does not support any of the more advanced filtering featurs of 
+by Spring. While this works in a lot of cases it does not support any of the more advanced filtering features of
 Log4j. For example, since it cannot add or modify any Filters other than the log level of a logger, changes cannot be made to allow 
 all log events for a specific user or customer to temporarily be logged 
 (see [DynamicThresholdFilter](filters.html#DynamicThresholdFilter) or 
@@ -127,7 +127,7 @@ Beginning with Log4j 2.12.0 Log4j also supports accessing the configuration via
 for changes by using the HTTP "If-Modified-Since" header. A patch has also been integrated into Spring Cloud Config
 starting with versions 2.0.3 and 2.1.1 for it to honor the If-Modified-Since header. In addition, the 
 log4j-spring-cloud-config project will listen for update events published by Spring Cloud Bus and then verify
-that the configuratoin file has been modified, so polling via HTTP is not required.
+that the configuration file has been modified, so polling via HTTP is not required.
 
 Log4j also supports composite configurations. A distributed application spread across microservices could 
 share a common configuration file that could be used to control things like enabling debug logging for a 
@@ -144,16 +144,16 @@ Further information regarding integration of the log4j-spring-cloud-config-clien
 Applications within a Docker container that log using a Docker logging driver can include special 
 attributes in the formatted log event as described at 
 [Customize Log Driver Output](https://docs.docker.com/config/containers/logging/log_tags/). Log4j 
-provides similar functionality via the [Docker Loookup](lookups.html#DockerLookup). More information on
+provides similar functionality via the [Docker Lookup](lookups.html#DockerLookup). More information on
 Log4j's Docker support may also be found at [Log4j-Docker](../log4j-docker/index.html). 
 
 ## Appender Performance
-The numbers in the table below represent how much time in seceonds was required for the application to 
-call logger.debug 100,000 times. These numbers only include the time taken to deliver to the specifcly 
-noted endpoint and many not include the actual time required before they are availble for viewing. All 
+The numbers in the table below represent how much time in seconds was required for the application to
+call logger.debug 100,000 times. These numbers only include the time taken to deliver to the specifically
+noted endpoint and many not include the actual time required before they are available for viewing. All
 measurements were performed on a MacBook Pro with a 2.9GHz Intel Core I9 processor with 6 physical and 12 
 logical cores, 32GB of 2400 MHz DDR4 RAM, and 1TB of Apple SSD storage. The VM used by Docker was managed 
-by VMWare Fusion and had 4 CPUs and 2 GB of RAM. These number should be used for relative perfomance comparisons 
+by VMWare Fusion and had 4 CPUs and 2 GB of RAM. These number should be used for relative performance comparisons
 as the results on another system may vary considerably.
 
 The sample application used can be found under the log4j-spring-cloud-config/log4j-spring-cloud-config-samples
@@ -213,7 +213,7 @@ circular buffer the overhead of logging will almost be unnoticeable to the appli
 1. If overall performance is a consideration or you require multiline events such as stack traces
 be processed properly then log via TCP to a companion container that acts as a log forwarder. Use the 
 Log4j Docker Lookup to add the container information to each log event.
-1. Whenvever guaranteed delivery is required use Flume Avro with a batch size of 1 or another Appender such 
+1. Whenever guaranteed delivery is required use Flume Avro with a batch size of 1 or another Appender such
 as the Kafka Appender with syncSend set to true that only return control after the downstream agent 
 acknowledges receipt of the event. Beware that using an Appender that writes each event individually should 
 be kept to a minimum since it is much slower than sending buffered events. 
