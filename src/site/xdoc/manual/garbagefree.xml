<?xml version="1.0"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor
  license agreements. See the NOTICE file distributed with this work for additional
  information regarding copyright ownership. The ASF licenses this file to
  You under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of
  the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required
  by applicable law or agreed to in writing, software distributed under the
  License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. See the License for the specific
  language governing permissions and limitations under the License. -->
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Garbage-free Steady State Logging</title>
    <author email="rpopma@apache.org">Remko Popma</author>
  </properties>
  <body>
    <section name="Garbage-free Steady State Logging">
      <!--
      <p>
        Different applications have different performance requirements.
        Some only need to worry about throughput, but for many
        the most important performance consideration is latency (response time).
        Users of such applications would consider it a serious problem
        if the system becomes unresponsive for more than a few seconds, or even milliseconds in some cases.
        In financial trading for example predictable low latency is so important that it is often considered
        worthwhile to trade off some throughput in return for a consistent response time.
      </p>
      -->
      <p>
        Garbage collection pauses are a common cause of latency spikes and for many systems
        significant effort is spent on controlling these pauses.
      </p>
      <p>
        Many logging libraries, including previous versions of Log4j, allocate many temporary objects like
        log event objects, Strings, char arrays, byte arrays and more during steady state logging.
        This contributes to pressure on the garbage collector and increases the frequency with which GC pauses occur.
      </p>
      <p>
        From version 2.6, Log4j can be used in a "garbage free" mode where objects and buffers are reused
        and temporary object allocation is avoided as much as possible.
      </p>
      <p>

      </p>
      <a name="jfr" />
      <subsection name="A Contrived Example">
        <p>
          To highlight the difference, we used Java Flight Recorder to measure a simple application that
          does nothing but log a simple string as often as possible for about 12 seconds.
        </p>
        <p>
          The application was configured to use Async Loggers, a RandomAccessFile appender and a
          "%d %p %c{1.} [%t] %m %ex%n" pattern layout.
        </p>
        <p>
          Mission Control shows that with Log4j 2.5 this application allocates memory at a rate of about 809 MB/sec,
          resulting in 141 minor collections.
          Log4j 2.6 does not allocate temporary objects in this configuration, and as a result
          the same application with Log4j 2.6 has a memory allocation rate of 1.6 MB/sec and had 0 (zero) garbage collections.
        </p>
        <table>
          <tr>
            <td>
        <a href="../images/log4j-2.5-FlightRecording.png"><img
            src="../images/log4j-2.5-FlightRecording-thumbnail40pct.png" /></a><br />
              With Log4j 2.5: memory allocation rate 809 MB/sec, 141 minor collections.
            </td>
            <td>
              <a href="../images/log4j-2.6-FlightRecording.png"><img
                  src="../images/log4j-2.6-FlightRecording-thumbnail40pct.png" /></a>
              <br />
              Log4j 2.6 did not allocate temporary objects: 0 (zero) garbage collections.
            </td>
          </tr>
        </table>
      </subsection>

      <a name="Enable" />
      <subsection name="Enabling Garbage-free Logging">
      <a name="Config" />
        <subsubsection name="Configuration">
          <h4>Configuration</h4>
          <p>
            In Log4j 2.6, garbage-free logging is enabled by default, except in web applications.
            Log4j will disable garbage-free logging if it detects that it is used in a web application
            (either when the <tt>javax.servlet.Servlet</tt> class
            is in the classpath or when the <tt>log4j2.is.webapp</tt> system property is set to "true").
            This is because garbage-free logging uses a number of ThreadLocal fields, which can cause
            memory leaks when a thread pool of the web application server continues to hold references
            to these fields after the web application is undeployed.
          </p>
          <p>
            It is possible to manually disable garbage-free logging by setting system property
            <tt>log4j2.enable.threadlocals</tt> to "false" before Log4j is initialized.
          </p>
          <p>
            Instead of system properties, the above properties can also be specified in a file named
            <tt>log4j2.component.properties</tt> by including this file in the classpath of the application.
          </p>
          <table><tr><td><b>Caution:</b> as of version 2.6, a Log4j configuration containing a <tt>&lt;Properties&gt;</tt> section
            will result in temporary objects being created during steady-state logging.
          </td></tr></table>
        </subsubsection>
        <a name="Appenders" />
        <subsubsection name="Supported Appenders">
          <h4>Supported Appenders</h4>
          <p>
            The following <a href="appenders.html">appenders</a> are garbage-free during steady-state logging:
            Console, File, RollingFile, RandomAccessFile, RollingRandomAccessFile,
            MemoryMappedFile, and Socket. Some temporary objects are created during file rollover.
          </p>
          <p>
            Any other appenders not in the above list (including Async) create temporary objects during steady-state
            logging. Use <a href="async.html">Async Loggers</a> to log asynchronously in a garbage-free manner.
          </p>
        </subsubsection>
        <a name="Layouts" />
        <subsubsection name="Supported Layouts">
          <h4>Supported Layouts</h4>
          <p>
            From the built-in <a href="layouts.html">layouts</a>, currently only PatternLayout is garbage-free,
            but only when used with the following conversion patterns.
          </p>
          <ul>
            <li>ClassNamePatternConverter (but including location is not garbage-free)</li>
            <li>DatePatternConverter</li>
            <li>FileLocationPatternConverter (but including location is not garbage-free)</li>
            <li>LevelPatternConverter</li>
            <li>LineLocationPatternConverter (but including location is not garbage-free)</li>
            <li>LineSeparatorPatternConverter</li>
            <li>LiteralPatternConverter (unless literal contains '${')</li>
            <li>LoggerPatternConverter</li>
            <li>MarkerSimpleNamePatternConverter</li>
            <li>MessagePatternConverter (unless message text contains '${')</li>
            <li>MethodLocationPatternConverter (but including location is not garbage-free)</li>
            <li>NamePatternConverter</li>
            <li>NanoTimePatternConverter</li>
            <li>ThreadIdPatternConverter</li>
            <li>ThreadNamePatternConverter</li>
            <li>ThreadPriorityPatternConverter</li>
          </ul>
          <p>
            Logging Exceptions and stack traces will create temporary objects.
          </p>
          <p>
            Other PatternLayout conversion patterns, and other Layouts may be updated
            to avoid creating temporary objects in future releases. (Patches welcome!)
          </p>
          <table><tr><td><b>Caution:</b> patterns containing regular expressions and lookups for property substitution
            will result in temporary objects being created during steady-state logging.
          </td></tr></table>
        </subsubsection>
        <a name="codeImpact" />
        <subsubsection name="Impact on Application Code: Autoboxing">
        <h4>Impact on Application Code: Autoboxing</h4>
        <p>
          We made an effort to make logging code garbage-free without requiring code changes in existing applications,
          but there is one area where this was not possible.
          When logging primitive values (i.e. int, double, boolean, etc.) the JVM
          autoboxes these primitive values to their Object wrapper equivalents, creating garbage.
        </p>
        <p>
          Log4j provides an <tt>Unboxer</tt> utility to prevent autoboxing of primitive parameters.
          This utility contains a thread-local pool of reused <tt>StringBuilder</tt>s.
          The <tt>Unboxer.box(primitive)</tt> methods write directly into a StringBuilder, and
          the resulting text will be copied into the final log message text without creating temporary objects.
        </p>
        <pre class="prettyprint linenums">import static org.apache.logging.log4j.util.Unboxer.box;

...
public void garbageFree() {
    logger.debug("Prevent primitive autoboxing {} {}", box(10L), box(2.6d));
}
</pre>
          <table><tr><td>
            <p>
              <b>Caution:</b> not all logging is garbage free. Specifically:
            </p>
            <ul>
              <li>The ThreadContext map and stack are not garbage-free yet.</li>
              <li>Logging more than 10 parameters creates vararg arrays.</li>
              <li>Logging very large messages (more than 518 characters) when all loggers are Async Loggers
                will cause the internal StringBuilder in the RingBuffer to be trimmed back to their max size.
              </li>
              <li>Logging messages containing '${': substituting a ${variable} creates temporary objects.</li>
              <li>Logging a lambda <em>as a parameter</em>
                (<tt>logger.info("lambda value is {}", () -> callExpensiveMethod())</tt>) creates a vararg array.
                Logging a lambda expression by itself is garbage-free:
                <tt>logger.debug(() -> callExpensiveMethod())</tt>.
              </li>
              <li>The <tt>Logger.traceEntry</tt> and <tt>Logger.traceExit</tt> methods create temporary objects.</li>
            </ul>
          </td></tr></table>
        </subsubsection>
        <p>
        </p>
        <p>
        </p>
      </subsection>
      <a name="Performance" />
      <subsection name="Performance">

        <a name="Latency" />
        <h4>TBD what to include here</h4>
      </subsection>
      <a name="UnderTheHood" />
      <subsection name="Under the Hood">
        <p>
          Custom Layouts that want to be garbage-free should implement the <tt>Encoder&lt;LogEvent&gt;</tt> interface.
          The <tt>TextEncoder</tt> class may be useful for custom Layouts that convert a LogEvent to a text
          representation.
        </p>
        <p>
          Custom Appenders that want to be garbage-free should provide their Layout with a
          <tt>ByteBufferDestination</tt> implementation that the Layout can directly write into.
        </p>
        <p>
          Custom Message implementations that implement <tt>org.apache.logging.log4j.util.StringBuilderFormattable</tt>
          can be converted to text by PatternLayout without creating temporary objects.
          Other layouts that convert LogEvents to text will likely also look for this interface.
        </p>
        <!--
        <p>
          TODO Applications that wish to reuse custom Message instances with Async Loggers should let
          their Message classes implement the <tt>org.apache.logging.log4j.message.ReusableMessage</tt> interface.
          TODO This is not sufficient: see LOG4J2-1342, would be nice if we could solve this in a generic way.
        </p>
        -->
      </subsection>
    </section>
  </body>
</document>